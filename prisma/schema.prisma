// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client"
  output       = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organizational Models
// BUSINESS LOGIC : If Someone have to create or register organization send request to admin
model Organization {
  id          Int         @id @default(autoincrement())
  name        String
  address     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  default     Boolean     @default(false)
  adminUserId Int
  admin       Admin       @relation(fields: [adminUserId], references: [userId])
  member      Member[]
  staff       Staff[]
  staffRole   StaffRole[]
}

// AUTHENTICATION AND AUTHORIZATION MODELS
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role
  isActive  Boolean  @default(false)
  member    Member?
  staff     Staff?
  admin     Admin?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, name])
}

model Member {
  userId         Int           @id @default(autoincrement())
  organizationId Int
  user           User          @relation(fields: [userId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Staff {
  userId         Int           @id @default(autoincrement())
  roleId         Int
  organizationId Int
  user           User          @relation(fields: [userId], references: [id])
  role           StaffRole     @relation(fields: [roleId], references: [id])
  permissions    Permission[]  @relation("UserPermissions")
  Organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Admin {
  userId        Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  superAdmin    Boolean        @default(false)
  organizations Organization[]
}

model StaffRole {
  id             Int          @id @default(autoincrement())
  name           String
  organizationId Int
  permissions    Permission[] @relation("StaffRolePermissions")
  staff          Staff[]
  organization   Organization @relation(fields: [organizationId], references: [id])

  // @@unique([name, organizationId])
  @@index([name])
}

model Permission {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  staffRole   StaffRole[] @relation("StaffRolePermissions")
  staffs      Staff[]     @relation("UserPermissions") // direct user permissions
}

enum Role {
  MEMBER
  STAFF
  ADMIN
}
